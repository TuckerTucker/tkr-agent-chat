{
  "projectName": "TKR Multi-Agent Chat Implementation Plan",
  "id": "b829b5e1-d533-4ebb-81de-7b3336fc00ef",
  "columns": [
    { "id": "to-do", "name": "To Do" },
    { "id": "in-progress", "name": "In Progress" },
    { "id": "done", "name": "Done" },
    { "id": "blocked", "name": "Blocked" }
  ],
  "cards": [
    {
      "id": "scaffold-agents",
      "title": "Scaffold Agent Directories and Config",
      "content": "Set up each agent as a self-contained Python module with config, prompt, tools, and tests.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 0,
      "subtasks": [
        "Create directory structure",
        "Implement config.py",
        "Add README.md"
      ],
      "tags": ["backend", "python", "structure"],
      "dependencies": [],
      "created_at": "2025-04-11T21:09:14.000Z",
      "updated_at": "2025-04-11T21:09:14.000Z"
    },
    {
      "id": "mcp-tools",
      "title": "Implement and Register MCP Tools",
      "content": "Develop tools in each agent's tools/ directory, auto-register with MCP server per agent.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 1,
      "subtasks": [
        "Write tool modules",
        "Auto-register tools",
        "Expose via MCP server"
      ],
      "tags": ["backend", "mcp", "tools"],
      "dependencies": ["scaffold-agents"],
      "created_at": "2025-04-11T21:09:14.000Z",
      "updated_at": "2025-04-11T21:09:14.000Z"
    },
    {
      "id": "tool-testing",
      "title": "Error Handling, Logging, and Testing for Tools",
      "content": "Add structured error handling, logging, and unit tests for all tools.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 2,
      "subtasks": [
        "Implement error handling",
        "Add logging",
        "Write unit tests"
      ],
      "tags": ["backend", "testing", "quality"],
      "dependencies": ["mcp-tools"],
      "created_at": "2025-04-11T21:09:14.000Z",
      "updated_at": "2025-04-11T21:09:14.000Z"
    },
    {
      "id": "agent-logic",
      "title": "Implement Core Agent Logic and Prompts",
      "content": "Develop agent logic in agent.py and modularize prompt logic in prompt.py.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 3,
      "subtasks": [
        "Implement agent class",
        "Integrate tools",
        "Add prompt logic"
      ],
      "tags": ["backend", "adk", "logic"],
      "dependencies": ["tool-testing"],
      "created_at": "2025-04-11T21:09:14.000Z",
      "updated_at": "2025-04-11T21:09:14.000Z"
    },
    {
      "id": "adk-runner",
      "title": "Integrate with ADK Runner and Session",
      "content": "Register agents with ADK runner/session for message routing and state management.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 4,
      "subtasks": [
        "Register agent",
        "Test session management"
      ],
      "tags": ["backend", "adk", "integration"],
      "dependencies": ["agent-logic"],
      "created_at": "2025-04-11T21:09:14.000Z",
      "updated_at": "2025-04-11T21:09:14.000Z"
    },
    {
      "id": "api-gateway",
      "title": "API Gateway and Middleware",
      "content": "Implement FastAPI gateway for REST/WebSocket, route messages and tool invocations.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 5,
      "subtasks": [
        "REST endpoints",
        "WebSocket endpoint",
        "Routing logic"
      ],
      "tags": ["backend", "api", "gateway"],
      "dependencies": ["adk-runner"],
      "created_at": "2025-04-11T21:09:14.000Z",
      "updated_at": "2025-04-11T21:09:14.000Z"
    },
    {
      "id": "react-ui",
      "title": "React UI Integration",
      "content": "Connect React UI to API Gateway, implement Zustand state, and all UI components.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 6,
      "subtasks": [
        "Connect WebSocket",
        "Implement UI components for chat, agent selection, and message display",
        "Wire Zustand state to UI"
      ],
      "tags": ["frontend", "react", "ui"],
      "dependencies": ["api-gateway"],
      "created_at": "2025-04-11T21:09:14.000Z",
      "updated_at": "2025-04-11T21:09:14.000Z"
    },
    {
      "id": "agent-ui-integration",
      "title": "Agent-UI Integration",
      "content": "Implement full integration between agent backend and UI for real-time multi-agent chat.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 7,
      "subtasks": [
        "Backend: Expose agent metadata via REST endpoint and/or WebSocket event",
        "Backend: Implement protocol for agent list updates (add/remove/change agents)",
        "Backend: Support message routing for agent selection and @-mention addressing",
        "Frontend: Fetch agent metadata on startup and update Zustand store",
        "Frontend: Render agent selection icons using agent metadata",
        "Frontend: Ensure agentName and agentColor are used in agent messages",
        "Frontend: Handle real-time agent list updates in UI"
      ],
      "tags": ["integration", "backend", "frontend", "agents", "ui"],
      "dependencies": ["react-ui"],
      "created_at": "2025-04-11T23:16:00.000Z",
      "updated_at": "2025-04-11T23:16:00.000Z"
    },
    {
      "id": "e2e-testing",
      "title": "End-to-End Testing and Documentation",
      "content": "Write integration and E2E tests, finalize documentation for agents and tools.",
      "columnId": "to-do",
      "collapsed": false,
      "position": 7,
      "subtasks": [
        "Integration tests",
        "E2E tests",
        "Update documentation"
      ],
      "tags": ["testing", "docs", "quality"],
      "dependencies": ["react-ui"],
      "created_at": "2025-04-11T21:09:14.000Z",
      "updated_at": "2025-04-11T21:09:14.000Z"
    }
  ],
  "next-steps": [
    "Start with agent directory scaffolding and config.",
    "Proceed to MCP tool implementation and registration.",
    "Continue with error handling, logging, and testing.",
    "Develop core agent logic and prompt modularity.",
    "Integrate with ADK runner and session.",
    "Build API Gateway and middleware.",
    "Integrate React UI.",
    "Finish with E2E testing and documentation."
  ],
  "last_updated": "2025-04-11T21:09:14.000Z",
  "isDragging": false,
  "scrollToColumn": null
}
